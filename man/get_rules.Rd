% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/viewinteract.R
\name{get_rules}
\alias{get_rules}
\title{Function for generating rule sets with main and interaction
effects between pairs of data views}
\usage{
get_rules(views, y, ntrees = 500, sampfrac = 0.632, learnrate = 0.01)
}
\arguments{
\item{views}{(named) list of 2 or more views, possibly involved in 
cross-view interactions. Each view should be a matrix, with the number 
of rows equal between views.}

\item{y}{binary factor with length equal to the number of rows in each
of the views specified by \code{views}.}

\item{ntrees}{integer vector of length one. Number of trees that should be
generated.}

\item{sampfrac}{numeric value between 0 and 1. Specifies the fraction of
observations that should be randomly sampled for generating each tree.
Values between 0 nd 1 yield subsamples of the training data, a value of
1 yields bootstrap samples of the training data.}

\item{learnrate}{numeric value between 0 and 1. Learning rate of boosting
parameter. Controls the influence of earlier trees on the next tree to 
be generated. Specifying a value of 0 will yield a (su)bagging approach
to tree induction, values \eqn{> 0} a boosting approach to tree induction.
Higher values increase the influence of earlier trees. Small non-zero
values are likely to perform best, which is reflected in the default
learing rate of .01.}
}
\value{
A named list containing two objects: \code{rules} and 
\code{dictionaries}. In turn, both contain three objects, named
\code{view1}, \code{view2} and \code{interact}. If view names were 
specified in the \code{views} argument, the \code{view1} and 
\code{view2} will be replaced by the names of the respective views.

The objects in \code{rules} are matrices, composed of 0-1 coded variables for 
every rule, taking a value of 1 if the condition(s) of the rule apply, 0 if 
the condition(s) of the rule do not apply. The objects in 
\code{dictionaries} contain the conditions for every rule. 

The \code{interaction} objects contain rules with conditions on variables
from two different views. These rules can accomodate cross-view interactions.
The other objects contain rules with conditions on a single variable (thereby 
accomodating main effects only).
}
\description{
\code{get_rules} generates rules containing main and interacion
effects from the specified set of views.
}
